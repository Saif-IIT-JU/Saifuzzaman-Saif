/*

    author : s@if

*/

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

#define 		NIL 			-1
#define		 	fi	 		    first
#define 		sec 			second
#define 		MAX 			INT_MAX
#define			INF 			1e9
#define 		ll 			    long long
#define 		PI 			    acos(-1.0)
#define			MOD 			1000000007
#define 		PLL 			pair<ll,ll>
#define 		PII			    pair<int,int>
#define 		ull 			unsigned long long
#define 		For(i,a,b) 		for(int i=a;i<=(int)b;i++)
typedef tree<int, null_type, less<int>, rb_tree_tag,
            tree_order_statistics_node_update> new_data_set;

//*find_by_order(k)  gives the kth element;
//order_of_key(item)   gives the index(number of element strictly less than item) of item;


inline int in() {int x; scanf("%d", &x); return x; }
bool Check(int N , int pos)	{	return (bool) (N & (1<<pos));}
int Set(int N, int pos) {	return N = N | (1<<pos);}

int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};    // King's move
int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};
int hx[]={-2,-2,-1,+1,+2,+2,-1,+1};    // Knight's move
int hy[]={+1,-1,+2,+2,-1,+1,-2,-2};
int dx[]={+1,-1,+0,+0};
int dy[]={+0,+0,+1,-1};

const int MAXN = (int)2e5+9;

int mat[2509][2509], n, dia;
int dis[2509], vis[2509], par[2509];
vector<int>path;
vector<int>g[2509];

void init()
{
    for(int i=0; i<=n; i++)
    {
        vis[i] = 0; dis[i] = -1;
    }

    return ;
}

void dfs(int u, int p, int d = 0)
{
    vis[u] = 1; dis[u] = d; par[u] = p;

    for(int v=1; v<=n; v++)
    {
        if(mat[u][v]==1 && vis[v]==0)
        {
            dfs(v,u,d+1);
        }
    }
}

void bfs(int s, PII ban, PII add)
{
    int i, j, u, v;
    queue<int>q;
    q.push(s); dis[s] = 0; vis[s] = 1; par[s] = -1;

    while(!q.empty())
    {
        u = q.front(); q.pop();

        for(int i=0; i<g[u].size(); i++)
        {
            v = g[u][i];

            if(vis[v]==1 || (u==ban.fi && v==ban.sec) ||
               (u==ban.sec && v==ban.fi)) continue;

            vis[v] = 1; par[v] = u; dis[v] = dis[u]+1;
            q.push(v);
        }

        if(u==add.fi && vis[add.sec]==0){
            par[add.sec] = u; vis[add.sec] = 1; dis[add.sec] = dis[u]+1;
            q.push(add.sec);
        }
        if(u==add.sec && vis[add.fi]==0){
            par[add.fi] = u; vis[add.fi] = 1; dis[add.fi] = dis[u]+1;
            q.push(add.fi);
        }
    }
}

void find_tree_diameter(int u, PII ban, PII add)
{
    init();
    //dfs(u, -1, 0);
    bfs(u,ban, add);
    int mx = -1, id = -1;
    for(int i=1; i<=n; i++){
        if(dis[i]>mx){
            mx = dis[i]; id = i;
        }
    }

    init();
    //dfs(id, -1, 0);
    bfs(id, ban, add);
    mx = id = -1;
    for(int i=1; i<=n; i++)
    {
        if(dis[i]>mx){
            mx = dis[i]; id = i;
        }
    }

    dia = mx;

    while(true)
    {
        if(id==-1) break;
        path.push_back(id);
        id = par[id];
    }
}

PII find_tree_center(int root, PII ban, PII add)
{
    find_tree_diameter(root, ban, add);
    int sz = path.size();
    int m = sz/2;
    int center = path[m]; path.clear();
    return PII(sz,center);
}

int main()
{
/*	freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);  */

    int i,j,k,l,m,p,q,x,y,u,v,r,tc,t;

    tc = in(); while(tc--)
    {
        n = in();
        for(i=1; i<=n; i++)
        {
            for(j=1; j<=n; j++)
                mat[i][j] = 0;
        }

        for(i=1; i<n; i++)
        {
            u = in(); v = in();
            mat[u][v] = mat[v][u] = 1;
            g[u].push_back(v);
            g[v].push_back(u);
        }

        find_tree_diameter(1, PII(-1,-1), PII(-1,-1));

        int ans = INF;
        int cancelU, cancelV, addU, addV;
        vector<int>tmp; tmp = path; path.clear();
        for(i=0; i+1<tmp.size(); i++)
        {
            u = tmp[i]; v = tmp[i+1];

            PII c1 = find_tree_center(u, PII(u,v), PII(-1,-1));
            PII c2 = find_tree_center(v, PII(u,v), PII(-1,-1));

          //  cout<<p<<" "<<q<<endl;

            int t1 = c1.fi, t2 = c2.fi;
            p = c1.sec, q = c2.sec;
            find_tree_diameter(1, PII(u,v), PII(p,q)); path.clear();

            if(dia<ans){
                ans = dia;
                cancelU = u, cancelV = v;
                addU = p; addV = q;
            }
        }

        printf("%d\n", ans);
        printf("%d %d\n", cancelU, cancelV);
        printf("%d %d\n", addU, addV);

        for(i=0; i<=n; i++) g[i].clear();
    }

    return 0;
}

// read the question correctly (is y a vowel? what are the exact constraints?)
// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)
