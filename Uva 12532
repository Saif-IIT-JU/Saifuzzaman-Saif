/*

    author : s@if

*/

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

#define 		NIL 			-1
#define		 	fi	 		    first
#define 		sec 			second
#define 		MAX 			INT_MAX
#define			INF 			99999999
#define 		ll 			    long long
#define 		PI 			    acos(-1.0)
#define			MOD 			1000000007
#define 		PLL 			pair<ll,ll>
#define 		PII			    pair<int,int>
#define 		ull 			unsigned long long
#define 		For(i,a,b) 		for(int i=a;i<=(int)b;i++)
typedef tree<int, null_type, less<int>, rb_tree_tag,
            tree_order_statistics_node_update> new_data_set;

//*find_by_order(k)  gives the kth element;
//order_of_key(item)   gives the index(number of element strictly less than item) of item;


inline int in() {int x; scanf("%d", &x); return x; }
bool Check(int N , int pos)	{	return (bool) (N & (1<<pos));}
int Set(int N, int pos) {	return N = N | (1<<pos);}

int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};
int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};
int hr[]={-2,-2,-1,+1,+2,+2,-1,+1};
int hc[]={+1,-1,+2,+2,-1,+1,-2,-2};
int dx[]={+1,-1,+0,+0};
int dy[]={+0,+0,+1,-1};

const int MAXN = (int)1e5+9;

int BIT[3][MAXN], n;

void update(int i, int idx, int val)
{
    while(idx<=n)
    {
        BIT[i][idx]+=val;
        idx += idx & (-idx);
    }

    return ;
}

int sum(int i, int idx)
{
    int ret = 0;

    while(idx>0)
    {
        ret+=BIT[i][idx];
        idx -= idx & (-idx);
    }

    return ret;
}

int query(int i, int l, int r)
{
    int R = sum(i, r);
    int L = sum(i,l-1);

    return R-L;
}

int main()
{
/*	freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);  */

    int i,j,k,l,m,p,q,x,y,u,v,r,tc,t;

    while(scanf("%d %d", &n, &q)==2)
    {
        int ara[n+9]; For(i,1,n) ara[i] = in();
        memset(BIT, 0, sizeof(BIT)); string ans = "";

        For(i,1,n)
        {
            if(ara[i]==0)     update(0,i,1);
            else if(ara[i]<0) update(1,i,1);
        }

       // cout<<"RUN IS HERE\n";
        while(q--){
            char ch[3]; scanf("%s", ch);
            if(ch[0]=='C')
            {
                i = in(), v = in();
                if(ara[i]==0)
                {
                    if(v<0){
                        update(0,i,-1);
                        update(1,i,1);
                    }
                    else if(v>0)
                    {
                        update(0,i,-1);
                    }
                }
                else if(ara[i]<0)
                {
                    if(v==0)
                    {
                        update(1,i,-1);
                        update(0,i,1);
                    }
                    else if(v>0)
                    {
                        update(1,i,-1);
                    }
                }
                else
                {
                    if(v==0)      update(0,i,1);
                    else if(v<0) update(1,i,1);
                }

                ara[i] = v;
            }
            else
            {
                l = in(), r = in();
                int cnt0 = query(0,l,r);
                int cnt1 = query(1,l,r);

                if(cnt0>0)         ans+="0";
                else if(cnt1%2==1) ans+="-";
                else               ans+="+";
            }
        }

        cout<<ans<<endl;
    }

    return 0;
}

// read the question correctly (is y a vowel? what are the exact constraints?)
// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)
