/*

    author : s@if

*/

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

#define 		NIL 			-1
#define		 	fi	 		    first
#define 		sec 			second
#define 		MAX 			INT_MAX
#define			INF 			99999999
#define 		ll 			    long long
#define 		PI 			    acos(-1.0)
#define			MOD 			1000000007
#define 		PLL 			pair<ll,ll>
#define 		PII			    pair<int,int>
#define 		ull 			unsigned long long
#define 		For(i,a,b) 		for(int i=a;i<=(int)b;i++)
typedef tree<int, null_type, less<int>, rb_tree_tag,
            tree_order_statistics_node_update> new_data_set;

//*find_by_order(k)  gives the kth element;
//order_of_key(item)   gives the index(number of element strictly less than item) of item;


inline int in() {int x; scanf("%d", &x); return x; }
bool Check(int N , int pos)	{	return (bool) (N & (1<<pos));}
int Set(int N, int pos) {	return N = N | (1<<pos);}

int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};
int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};
int hr[]={-2,-2,-1,+1,+2,+2,-1,+1};
int hc[]={+1,-1,+2,+2,-1,+1,-2,-2};
int dx[]={+1,-1,+0,+0};
int dy[]={+0,+0,+1,-1};

const int MAXN = (int)1e5+9;

ll a, b;

ll CalculatePrice(ll m)
{
    ll price = 0, u, v;

    v = min(100LL, m); m-=v;

    price+=2*v;

    v = min(9900LL, m); m-=v;

    price+=3*v;

    v = min(990000LL, m); m-=v;

    price+=5*v+7*m;

    return price;
}

int CalculateTotalUnit(ll m)
{

    ll price = CalculatePrice(m);

    if(price<a) return 0;
    else if(price==a) return 1;
    else return 2;
}

int func(ll m, ll unit)
{
    ll price1=CalculatePrice(m), price2=CalculatePrice(unit-m);

    ll d = abs(price1-price2);

    if(d==b) return 0;
    if(d>b) return 1;
    else  return 2;
}

int main()
{
/*	freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);  */

    ll i,j,k,l,m,n,p,q,x,y,u,v,r,tc,t;

  //  cout<<CalculateTotalUnit(400)<<endl;


    while(scanf("%lld %lld", &a, &b)==2 )
    {
        if(a==0 && b==0)
            break;

        l = 1 ; r = 1e12; ll mid, unit;

        while(l<=r)
        {
            mid = (l+r)>>1;

           // cout<<l<<" "<<r<<" "<<mid<<" ";

            k = CalculateTotalUnit(mid);
            if(k==1)
            {
                unit = mid;
                break;
            }
            else if(k==2)
                r = mid-1;
            else if(k==0)
                l = mid+1;
        }

       // cout<<unit<<endl;

        ll UnitToPay; l = 1, r = unit;

        while(l<=r)
        {
            mid = (l+r)>>1;

            k = func(mid, unit);

            if(k==0)
            {
                UnitToPay = mid;
                r = mid-1;
            }
            else if(k==1)
                l = mid+1;
            else
                r = mid-1;
        }

        printf("%lld\n", CalculatePrice(UnitToPay));

    }

    return 0;
}

// read the question correctly (is y a vowel? what are the exact constraints?)
// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)
