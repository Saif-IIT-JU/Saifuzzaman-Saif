/*

    author : s@if

*/

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

#define 		NIL 			-1
#define		 	fi	 		    first
#define 		sec 			second
#define 		MAX 			INT_MAX
#define			INF 			1e9
#define 		ll 			    int
#define 		PI 			    acos(-1.0)
#define			MOD 			1000000007
#define 		PLL 			pair<ll,ll>
#define 		PII			    pair<int,int>
#define 		ull 			unsigned long long
#define 		For(i,a,b) 		for(int i=a;i<=(int)b;i++)
typedef tree<int, null_type, less<int>, rb_tree_tag,
            tree_order_statistics_node_update> new_data_set;

//*find_by_order(k)  gives the kth element;
//order_of_key(item)   gives the index(number of element strictly less than item) of item;


inline int in() {int x; scanf("%d", &x); return x; }
bool Check(int N , int pos)	{	return (bool) (N & (1<<pos));}
int Set(int N, int pos) {	return N = N | (1<<pos);}

int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};    // King's move
int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};
int hx[]={-2,-2,-1,+1,+2,+2,-1,+1};    // Knight's move
int hy[]={+1,-1,+2,+2,-1,+1,-2,-2};
int dx[]={+1,-1,+0,+0};
int dy[]={+0,+0,+1,-1};

const int MAXN = (int)2e5+9;

struct node
{
    map<ll,ll>mp; ll from, to;
    node *Left, *Right;
    node()
    {
        from = 1, to = 1e9;
        Left = Right = NULL;
    }

    void extend()
    {
        if(Left==NULL)
        {
            Left = new node();
            Right = new node();

            ll mid = (from+to)/2;

            Left->from = from;
            Left->to = mid;
            Right->from = mid+1;
            Right->to = to;
        }
    }
};

void update(node *nd, ll l, ll r, ll x, ll val)
{
    if(l>r || nd->from>r || nd->to<l) return ;

    if(nd->from>=l && nd->to<=r)
    {
        nd->mp[x]+=val;
        return ;
    }

    nd->extend();

    update(nd->Left, l, r, x, val);
    update(nd->Right, l, r, x, val);

    nd->mp[x] = nd->Left->mp[x] + nd->Right->mp[x];
}

ll query(node *nd, ll l, ll r, ll x)
{
    if(l>r || nd->from>r || nd->to<l) return 0;

    if(nd->from>=l && nd->to<=r) return nd->mp[x];

    nd->extend();

    ll ret1 = query(nd->Left, l, r, x);
    ll ret2 = query(nd->Right, l, r, x);

    return ret1+ret2;
}

int main()
{
/*	freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);  */

    ll i,j,k,l,m,n,p,q,x,y,u,v,r,tc,t;

    scanf("%d", &q);
    node *root = new node();
    while(q--)
    {
        scanf("%d %d %d", &k, &t, &x);

        if(k==1)
        {
            update(root, t, t, x, 1);
        }
        else if(k==2)
        {
            update(root, t, t, x, -1);
        }
        else
        {
            ll ans = query(root, 1, t, x);
            printf("%d\n", ans);
        }
    }

    return 0;
}

// read the question correctly (is y a vowel? what are the exact constraints?)
// look out for SPECIAL CASES (n=1?) and overflow (ll vs int?)
